Version 0.3.1
------------------------------------------------------------------------------
Note: 

this version contains most of the breaking changes that will occur during
development of this library. Many of these changes are made for compatability
with a more general functional programming library that was forked from this
project, but will augment this library hugely.

New Functions:

* mcIndMap: apply a function to a list and its indices

Improvements:

* added optimisations to several parallel functions when cores = 1.
* inputs are now more rigourously screened, with several functions now
testing the arity of their input function (only when ellipses aren't used). Practically 
this only effects the quality of the error messages thrown by mchof for the better.
* Non-parallel functionality now available on windows.

API Changes:
* removed the right parameter of mcPosition and mcFind, 
as it was inconsistent with the philosophy of preferring composing
functions to using lots of parameters. To remedy this use mcPositionr and mcFindr.
* NULL values are now treated the same as other length-zero values, for 
compatability with pairlists.
* renamed the several function parameters:
predicate functions are now named "p", instead of "f".
collections are now named "xs" instead of "x". Values that
can be either a collection or a value are still called "x".
* mcFilter, mcFind and mcReject now always return lists, instead of the return 
value depending on the input collection.
* logical coercion is no longer performed for functions like mcFilter and mcAny.
* mcPartition always returns a list of lists now.

Version 0.3
------------------------------------------------------------------------------

New Functions:

* mcReject: split a list into two lists based on a predicate.
* mcFold: applies an associative binary operator 
 to a list (eg. +, *, rbind) with an initial value, returning a single element. 
* mcOne: applies a predicate to a list, count the number of matches,
 returns true if only one match was found.
mcAll: applies a predicate to a list, count the number of matches,
 returns true if every element matched.
mcAny: applies a predicate to a list, count the number of matches,
 returns true if one or more elements were matched.

Improvements:

* significant improvements made to the documentation.
* error reporting improved; data that triggered the fail and its class now displayed
for all internally-triggered errors.
* performance improved significantly, particularily for small lists when mc.cores = 1
* added an alias mcSelect for mcFilter, to complement mcReject

Bug Fixes:
* bug with option handling fixed.
* errors in documentation fixed.

API Changes:
* mcZip & mcZipWith now takes a variable number of arguments;
to zip 1:4, 5:8, 9:12 you would now use mcZip(1:4, 5:8, 9:12, paropts = list(mc.cores = 2))
instead of mcZip(list(1:4, 5:8, 9:12), paropts = list(mc.cores = 2)) 

Version 0.2 (2013-05-03)
------------------------------------------------------------------------------

New Functions:

* mcPartition: split a list into two lists based on a predicate.
* mcZipWith/mcZip: takes n lists/vectors, generates a list of n-tuples.
* mcUnzipWith/mcUnzip: takes a list of n-tuples, returns n lists.

New Features:

* options mechanism for setting the number of cores to be used: 
options(mc.cores) <- 2

Bug Fixes:

* error reporting improved.
* errors in documentation fixed.
